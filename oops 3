package Package;
import java.util.concurrent.locks.StampedLock;

class SharedData {
    private int value = 0;
    private final StampedLock lock = new StampedLock();

    // Write method
    public void write(int newValue) {
        long stamp = lock.writeLock();
        try {
            System.out.println(Thread.currentThread().getName() + " writing " + newValue);
            value = newValue;
        } finally {
            lock.unlockWrite(stamp);
        }
    }

    // Optimistic read method
    public int optimisticRead() {
        long stamp = lock.tryOptimisticRead(); // non-blocking
        int currentValue = value;

        // validate ensures no write happened during read
        if (!lock.validate(stamp)) {
            // fall back to a read lock
            stamp = lock.readLock();
            try {
                currentValue = value;
            } finally {
                lock.unlockRead(stamp);
            }
        }
        System.out.println(Thread.currentThread().getName() + " read " + currentValue);
        return currentValue;
    }
}

public class OptimisticReadDemo {
    public static void main(String[] args) {
        // ðŸ”¹ Print your details first
        System.out.println("2117240070101");
        System.out.println("HARI PRIYAN S");
        System.out.println("-------------------");

        SharedData data = new SharedData();

        // Writer thread
        Thread writer = new Thread(() -> {
            for (int i = 1; i <= 5; i++) {
                data.write(i);
                try { Thread.sleep(100); } catch (InterruptedException e) { }
            }
        }, "Writer");

        // Reader thread
        Thread reader = new Thread(() -> {
            for (int i = 0; i < 5; i++) {
                data.optimisticRead();
                try { Thread.sleep(50); } catch (InterruptedException e) { }
            }
        }, "Reader");

        writer.start();
        reader.start();
    }
}
